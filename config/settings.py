"""
Django settings for gym_manager_bot project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path

from django.templatetags.static import static

from perfect_gym_api.api import PerfectGymApi
from perfect_gym_api.models.settings import PerfectGymSettings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-mis9#gn+0!&t6t!a!a0p#4g03&*&a4_l9m)fpp$r8g8cnue7-l'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '192.168.0.2']

# Application definition

INSTALLED_APPS = [
    'unfold',
    'unfold.contrib.filters',  # optional, if special filters are needed
    'unfold.contrib.forms',  # optional, if special form elements are needed
    'unfold.contrib.import_export',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'encrypted_model_fields',
    'django_celery_beat',
    'django_celery_results',
    'django_browser_reload',
    'accounts',
    'reservations'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django_browser_reload.middleware.BrowserReloadMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('POSTGRES_NAME'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': os.environ.get('POSTGRES_HOST'),
        'PORT': os.environ.get('POSTGRES_POR'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en'

TIME_ZONE = 'Europe/Warsaw'

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTH_USER_MODEL = 'accounts.User'
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"
REGISTRATION_OPEN = False

STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_URL = 'static/'
STATIC_ROOT = '/var/www/static/'
# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

log_dir = os.path.join(BASE_DIR, 'logs')
log_file = os.path.join(log_dir, 'gym_manager.log')
Path(log_dir).mkdir(parents=True, exist_ok=True)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': log_file,
            'formatter': 'simple'
        },
    },
    'formatters': {
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'root': {
        'handlers': ['file'],
        'level': 'INFO',
    },
}


# CELERY
CELERY_TIMEZONE = "Europe/Warsaw"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_BROKER_URL = f'redis://{os.environ.get("REDIS_HOST")}:6379'
CELERY_ACCEPT_CONTENT = ['application/json', 'pickle']
CELERY_RESULT_SERIALIZER = 'pickle'
CELERY_TASK_SERIALIZER = 'pickle'
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_RESULT_EXTENDED = True

# UNFOLD
UNFOLD = {
    "SITE_TITLE": "SØUOA",
    "SITE_HEADER": "SØUOA",
    "SITE_ICON": lambda request: static("logo.svg")
}

FIELD_ENCRYPTION_KEY = '1utBHXiKp-eZxmSR3lutCHYHDH3QB321yBnj0X6c0K0='

CLUB_ID = int(os.environ.get('CLUB_ID'))
ACTIVITY_IDS = [int(x) for x in os.environ.get('ACTIVITY_IDS').split(',')]

PG_API_SETTINGS = {
    "request_headers": {
        "host": os.environ.get('PG_HOST'),
        "origin": os.environ.get('PG_ORIGIN'),
        "referer": os.environ.get('PG_REFERER'),
        "cookie": f"ClientPortal.Embed; x-bni-fpc={os.environ.get('PG_X_BNI_FPC')}; x-bni-rncf={os.environ.get('PG_X_BNI_RNCF')}; ClientPortal.Auth={os.environ.get('PG_CLIENTPORTAL_AUTH')}; ClientPortal.Auth.bak={os.environ.get('PG_CLIENTPORTA_AUTH_BAK')}"
    },
    "url": os.environ.get('PG_ORIGIN'),
    "login_path": "/ClientPortal2/Auth/Login",
    "weekly_classes_path": "/ClientPortal2/Classes/ClassCalendar/WeeklyClasses",
    "book_classes_path": "/ClientPortal2/Classes/ClassCalendar/BookClass",
}

PERFECT_GYM_API = PerfectGymApi(PerfectGymSettings(**PG_API_SETTINGS))
RESERVATION_DAYS_FORWARD = int(os.environ.get('RESERVATION_DAYS_FORWARD'))
